# HG changeset patch
# Parent ef08d498fbe53402db3cd247e1e975c28c690fd7
# User Patrick Cloke <clokep@gmail.com>
# Date 1413484333 14400
#      Wed Oct 15 15:40:34 2014 -0400
Bug 1018060: Implement voice call support in Instantbird using webRTC.
* * *
Clean up xml2sdp.

diff --git a/chat/components/public/prplIConversation.idl b/chat/components/public/prplIConversation.idl
--- a/chat/components/public/prplIConversation.idl
+++ b/chat/components/public/prplIConversation.idl
@@ -69,18 +69,26 @@ interface prplIConversation: nsISupports
   /* Method to add or remove an observer */
   void addObserver(in nsIObserver aObserver);
   void removeObserver(in nsIObserver aObserver);
 
   /* Observers will be all receive new-text notifications.
      aSubject will contain the message (prplIMessage) */
 };
 
-[scriptable, uuid(0c072a80-103a-4992-b249-8e442b5f0d46)]
+[scriptable, uuid(c3a50563-9090-413f-933f-441e9615f585)]
 interface prplIConvIM: prplIConversation {
+  /* Send a SDP offer when user makes a call.
+  void initiateCall(in AUTF8String aOffer);
+
+  /* Send a SDP answer when a user accepts an incoming video call.
+  void acceptCall(in AUTF8String aAnswer);
+
+  /* Terminate a video call */
+  void endCall();
 
   /* The buddy at the remote end of the conversation */
   readonly attribute imIAccountBuddy buddy;
 
   /* The remote buddy is not currently typing */
   const short NOT_TYPING = 0;
 
   /* The remote buddy is currently typing */
diff --git a/chat/components/src/imConversations.js b/chat/components/src/imConversations.js
--- a/chat/components/src/imConversations.js
+++ b/chat/components/src/imConversations.js
@@ -430,16 +430,19 @@ UIConversation.prototype = {
       }
     }
   },
 
   // prplIConvIM
   get buddy() this.target.buddy,
   get typingState() this.target.typingState,
   sendTyping: function(aString) this.target.sendTyping(aString),
+  initiateCall: function(aOffer) this.target.initiateCall(aOffer),
+  acceptCall: function(aOffer) this.target.acceptCall(aOffer),
+  endCall: function() this.target.endCall(),
 
   // Chat only
   getParticipants: function() this.target.getParticipants(),
   get topic() this.target.topic,
   set topic(aTopic) { this.target.topic = aTopic; },
   get topicSetter() this.target.topicSetter,
   get topicSettable() this.target.topicSettable,
   get noTopicString() bundle.GetStringFromName("noTopic"),
diff --git a/chat/modules/jsProtoHelper.jsm b/chat/modules/jsProtoHelper.jsm
--- a/chat/modules/jsProtoHelper.jsm
+++ b/chat/modules/jsProtoHelper.jsm
@@ -518,16 +518,20 @@ const GenericConvIMPrototype = {
 
     if (aState == Ci.prplIConvIM.NOT_TYPING)
       delete this.typingState;
     else
       this.typingState = aState;
     this.notifyObservers(null, "update-typing", null);
   },
 
+  initiateCall: function(aOffer) { throw Cr.NS_ERROR_NOT_IMPLEMENTED; },
+  acceptCall: function(aOffer) { throw Cr.NS_ERROR_NOT_IMPLEMENTED; },
+  endCall: function() { throw Cr.NS_ERROR_NOT_IMPLEMENTED; },
+
   get isChat() false,
   buddy: null,
   typingState: Ci.prplIConvIM.NOT_TYPING
 };
 
 const GenericConvChatPrototype = {
   __proto__: GenericConversationPrototype,
   _interfaces: [Ci.prplIConversation, Ci.prplIConvChat],
diff --git a/chat/protocols/xmpp/moz.build b/chat/protocols/xmpp/moz.build
--- a/chat/protocols/xmpp/moz.build
+++ b/chat/protocols/xmpp/moz.build
@@ -5,14 +5,15 @@
 
 EXTRA_COMPONENTS += [
     'xmpp.js',
     'xmpp.manifest',
 ]
 
 EXTRA_JS_MODULES += [
     'xmpp-authmechs.jsm',
+    'xmpp-jingle.jsm',
     'xmpp-session.jsm',
     'xmpp-xml.jsm',
     'xmpp.jsm',
 ]
 
 JAR_MANIFESTS += ['jar.mn']
diff --git a/chat/protocols/xmpp/xmpp-jingle.jsm b/chat/protocols/xmpp/xmpp-jingle.jsm
new file mode 100644
--- /dev/null
+++ b/chat/protocols/xmpp/xmpp-jingle.jsm
@@ -0,0 +1,320 @@
+/* This Source Code Form is subject to the terms of the Mozilla Public
+ * License, v. 2.0. If a copy of the MPL was not distributed with this
+ * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
+
+const EXPORTED_SYMBOLS = ["Jingle"];
+
+Components.utils.import("resource:///modules/xmpp-xml.jsm");
+
+const Jingle = {
+  sdp2xml: function sdp2xml(aOffer) {
+    // NOTE: The SDP offer follows the RFC-4566: Session Description Protocol.
+    // Using XEP-0320: Jingle RTP Session.
+
+    // SDP session description consists of a session-level section followed by
+    // zero or more media-level sections.
+    let sections = aOffer.split("m=");
+
+    // The session-level section contains the version, user name, type of call,
+    // timestamp, ufrag, password, fingerprint and other attributes.
+    let ufrag, pwd, hashType, fingerprintData;
+    let headers = sections.shift().split("\r\n");
+    for (let header of headers) {
+      // "ice-ufrag" and "ice-pwd" attributes convey the username fragment and
+      // password used by ICE for message integrity. See RFC 5245, Section 15.4.
+      if (header.startsWith("a=ice-ufrag")) {
+        // e.g. [a=ice-ufrag:0c838e8e]
+        ufrag = header.slice(header.indexOf(":") + 1);
+      }
+      else if (header.startsWith("a=ice-pwd")) {
+        // eg. [a=ice-pwd:1ef8fe1ef670d3dd89098b03dac4b4ed]
+        pwd = header.slice(header.indexOf(":") + 1);
+      }
+      else if (header.startsWith("a=fingerprint")) {
+        // e.g. [a=fingerprint:sha-256 2B:6E:6A:8D:...]
+        [hashType, fingerprintData] =
+          header.slice(header.indexOf(":") + 1).split(" ");
+      }
+    }
+
+    // If we don't have the required information from the header, don't bother
+    // parsing media sections.
+    if (!(ufrag && pwd && hashType && fingerprintData))
+      return null;
+
+    // Now transform each media section to Jingle stanzas.
+    let contentNodes = [];
+    for (let medium of sections) {
+      let lines = medium.split("\r\n");
+      let mediaName = lines[0].split(" ")[0];
+
+      let nameAttr;
+      if (mediaName == "audio")
+        nameAttr = "voice";
+      else if (mediaName == "video")
+        nameAttr = "face";
+      else // ignore sections that are neither audio nor video.
+        continue;
+
+      let content = Stanza.node("content", null,
+                                {creator: "initiator", name: nameAttr});
+
+      // Every media section contains an a=setup line with a value that's
+      // one of: actpass / active / passive.
+      let setupAttr = medium.match(/(a=setup)[\S]*/)[0].split(":")[1];
+
+      let description = Stanza.node("description", null,
+                                    {xmlns: Stanza.NS.jingle_apps_rtp,
+                                     media: mediaName,
+                                     setup: setupAttr});
+      content.addChild(description);
+
+      // Transport element is a child of content node. It contains a fingerprint
+      // and several candidate nodes.
+      let transport = Stanza.node("transport", null,
+                                  {xmlns: Stanza.NS.jingle_transport_ice_udp,
+                                   ufrag: ufrag,
+                                   pwd: pwd});
+      content.addChild(transport);
+
+      transport.addChild(Stanza.node("fingerprint", null,
+                                     {xmlns: Stanza.NS.jingle_apps_dtls,
+                                      hash: hashType},
+                                     fingerprintData));
+
+      let lastPayload;
+
+      for (let line of lines) {
+
+        // parseParams will return an array of the space-separated
+        // parameters after the ':' on the line variable.
+        let parseParams = () => line.slice(line.indexOf(":") + 1).split(" ");
+
+        if (line.startsWith("a=extmap")) {
+          // XEP: 0294 Jingle RTP Header Extensions Negotiation.
+          // e.g. [ a=extmap:1 urn:ietf:params:rtp-hdrext:ssrc-audio-level].
+          let [id, uri] = parseParams();
+          description.addChild(Stanza.node("rtp-hdrext", null,
+                                           {xmlns: Stanza.NS.jingle_apps_rtp_hdrext,
+                                            id: id, uri: uri}));
+        }
+        else if (line.startsWith("a=rtpmap")) {
+          // e.g. [a=rtpmap:8 PCMA/8000/2]
+          let [id, value] = parseParams();
+          let values = value.split("/");
+
+          let attr = {id: id, name: values[0], clockrate: values[1]};
+          // channel information is optional.
+          if (values.length >= 3)
+            attr.channels = values[2];
+
+          lastPayload = Stanza.node("payload-type", null, attr);
+          description.addChild(lastPayload);
+        }
+        else if (line.startsWith("a=ptime")) {
+          // This gives the length of time in milliseconds represented by the
+          // media in a packet. It applies to the payload node created before.
+          lastPayload.addChild(Stanza.node("parameter", null,
+                                           {ptime: parseParams()[0]}));
+        }
+        else if (line.startsWith("a=fmtp")) {
+          // a=fmtp field allows parameters that are specific to a particular
+          // format to be conveyed in a way that SDP does not have to understand
+          // them. This is added in same manner as a=ptime.
+          // TODO parameter 1 is the id of the rtpmap this applies too;
+          // we currently just assume the rtpmap is the previous payload.
+          lastPayload.addChild(Stanza.node("parameter", null,
+                                           {value: parseParams()[1]}));
+        }
+        else if (line.startsWith("a=rtcp-fb")) {
+          // XEP: 0293 Jingle RTP Feedback Negotiation.
+          // e.g. [a=rtcp-fb:98 nack rpsi]
+          let values = parseParams();
+
+          // TODO: values[0] is the id of the rtpmap this applies to;
+          // we currently just assume the rtpmap is the previous payload.
+          let attr = {xmlns: Stanza.NS.jingle_apps_rtcp_fb, type: values[1]};
+          if (values.length >= 3)
+            attr.subtype = values[2];
+
+          lastPayload.addChild(Stanza.node("rtcp-fb", null, attr));
+        }
+        else if (line.startsWith("a=candidate")) {
+          // e.g. [a=candidate:3 2 UDP 1686044670 106.51.45.18 43127 typ host]
+          let values = parseParams();
+          let attr = {component: values[0], foundation: values[1],
+                      protocol: values[2], priority: values[3], ip: values[4],
+                      port: values[5], type: values[7]};
+          if (values.length >= 9) {
+            attr.reladdr = values[9];
+            attr.relport = values[11];
+          }
+
+          transport.addChild(Stanza.node("candidate", null, attr));
+        }
+      }
+
+      contentNodes.push(content);
+    }
+
+    return contentNodes;
+  },
+
+  xml2sdp: function xml2sdp(aJingleContentNodes) {
+    if (!aJingleContentNodes.length)
+      return null;
+
+    // Parts of the header (v=, o=, s= and t= fields) are not passed as part of
+    // the XMPP stanza.
+    let sdp = ["v=0",
+               "o=Mozilla-SIPUA 0 0 IN IP4 0.0.0.0",
+               "s=SIP Call",
+               "t=0 0"];
+
+    // Transport node contains ufrag, pwd, fingerprint.
+    let transport = aJingleContentNodes[0].getElement(["transport"]);
+    if (!transport)
+      return null;
+
+    sdp.push("a=ice-ufrag:" + transport.attributes["ufrag"]);
+    sdp.push("a=ice-pwd:" + transport.attributes["pwd"]);
+
+    let fingerprint = transport.getElement(["fingerprint"]);
+    if (fingerprint) {
+      // XXX Should we warn if fingerprint is missing?
+      sdp.push("a=fingerprint:" + fingerprint.attributes["hash"]  + " " +
+               fingerprint.innerText);
+    }
+
+    // The content node is used to form the media element of the offer. I.e. it
+    // contains m=, c=, a=rtpmap, a=candidate and other attributes which define
+    // how that media voice/video are mapped.
+    for (let content of aJingleContentNodes) {
+      if (content.qName != "content")
+        continue;
+
+      let description = content.getElement(["description"]);
+      if (!description)
+        continue;
+
+      // Media is of the form [m=video 33680 RTP/SAVPF 120].
+      let media = "m=" + description.attributes["media"];
+
+      // Connection element (IP is first IP of candidate).
+      // e.g. [c=IN IP4 106.51.45.18]
+      let transport = content.getElement(["transport"]);
+      if (!transport)
+        continue;
+
+      let candidates = transport.getElements(["candidate"]);
+      // The media line contains the real port, if we can find one.
+      let port;
+      for (let candidate of candidates) {
+        if (candidate.attributes["relport"]) {
+          port = candidate.attributes["relport"];
+          break;
+        }
+      }
+      // The port of the first candidate is used if no relport exists.
+      if (!port)
+        port = candidates[0].attributes["port"];
+
+      media += " " + port + " RTP/SAVPF";
+
+      let connection = "c=IN IP";
+      // XXX Using the ip from the first candidate doesn't seem perfect...
+      let ip = candidates[0].attributes["ip"];
+      if (ip.contains(":"))
+        connection += "6 " + ip;
+      else
+        connection += "4 " + ip;
+      let section = [connection];
+
+      // Payload element [a=rtpmap:8 PCMA/8000].
+      let payloadNodes = description.getElements(["payload-type"]);
+      for (let payloadNode of payloadNodes) {
+        let payload = "a=rtpmap:" + payloadNode.attributes["id"] + " " +
+          payloadNode.attributes["name"] + "/" + payloadNode.attributes["clockrate"];
+        if (payloadNode.attributes["channels"])
+          payload += "/" + payloadNode.attributes["channels"];
+        section.push(payload);
+
+        // Push payload-type ID to media.
+        media += " " + payloadNode.attributes["id"];
+
+        let parameter = payloadNode.getElement(["parameter"])
+        if (parameter) {
+          // Ping element.
+          if (parameter.attributes["ptime"])
+            section.push("a=ptime:" + parameter.attributes["ptime"]);
+          // Additional parameter to be added if specified.
+          else if (parameter.attributes["value"]) {
+            section.push("a=fmtp:" + payloadNode.attributes["id"] + " " +
+                         parameter.attributes["value"]);
+          }
+        }
+
+        /* rtcp-fb element defined in XEP: 2093 Jingle RTP Feedback Negotiation
+         * uses a modified  RTP profile for audio and video conferences with
+         * minimal control to acieve timely feedback.
+         */
+        let rtcpFbData = payloadNode.getElements(["rtcp-fb"]);
+        for (let rNode of rtcpFbData) {
+          let rtcpFb = "a=rtcp-fb:" + payloadNode.attributes["id"] + " " +
+            rNode.attributes["type"];
+          if (rNode.attributes["subtype"])
+            rtcpFb += " " + rNode.attributes["subtype"];
+
+          section.push(rtcpFb);
+        }
+      }
+
+      // Push a=sendrecv just after the last payload type element.
+      section.push("a=sendrecv");
+
+      // rtp-hdrext element.
+      // e.g. [a=extmap:1 urn:ietf:params:rtp-hdrext:ssrc-audio-level].
+      let rtpContent = description.getElement(["rtp-hdrext"]);
+      if (rtpContent) {
+        let rtpHdrext = "a=extmap:" + rtpContent.attributes["id"]  + " " +
+                        rtpContent.attributes["uri"];
+        section.push(rtpHdrext);
+      }
+
+      // Setup attribute of description [a=setup:actpass].
+      if (description.attributes["setup"])
+        section.push("a=setup:" + description.attributes["setup"]);
+
+      // Candidate elements.
+      // e.g. [a=candidate:0 1 UDP 2122252543 106.51.45.18 60055 typ host].
+      for (let node of candidates) {
+        let candidate = "a=candidate:" +
+                        node.attributes["component"] + " " +
+                        node.attributes["foundation"] + " " +
+                        node.attributes["protocol"] + " " +
+                        node.attributes["priority"] + " " +
+                        node.attributes["ip"] + " " +
+                        node.attributes["port"] +
+                        " typ " + node.attributes["type"];
+        if (node.attributes["relport"]) {
+          candidate += " raddr " + node.attributes["reladdr"] +
+                       " rport " + node.attributes["relport"];
+        }
+
+        section.push(candidate);
+      }
+
+      // Add the media element as the first part of this section.
+      section.unshift(media);
+
+      // Taking [a=rtcp-mux] as default. Suitable XML element is not defined.
+      // Most of the devices have rtcp-mux in their offer.
+      section.push("a=rtcp-mux");
+
+      // Add this section to the full SDP.
+      sdp.push(...section);
+    }
+
+    return sdp.join("\r\n");
+  }
+};
diff --git a/chat/protocols/xmpp/xmpp-xml.jsm b/chat/protocols/xmpp/xmpp-xml.jsm
--- a/chat/protocols/xmpp/xmpp-xml.jsm
+++ b/chat/protocols/xmpp/xmpp-xml.jsm
@@ -65,17 +65,25 @@ const NS = {
   nick_notify               : "http://jabber.org/protocol/nick+notify",
   activity                  : "http://jabber.org/protocol/activity",
   last                      : "jabber:iq:last",
   avatar_data               : "urn:xmpp:avatar:data",
   avatar_data_notify        : "urn:xmpp:avatar:data+notify",
   avatar_metadata           : "urn:xmpp:avatar:metadata",
   avatar_metadata_notify    : "urn:xmpp:avatar:metadata+notify",
   pubsub                    : "http://jabber.org/protocol/pubsub",
-  pubsub_event              : "http://jabber.org/protocol/pubsub#event"
+  pubsub_event              : "http://jabber.org/protocol/pubsub#event",
+
+  // Jingle elements.
+  jingle                    : "urn:xmpp:jingle:1",
+  jingle_apps_dtls          : "urn:xmpp:jingle:apps:dtls:0",
+  jingle_apps_rtcp_fb       : "urn:xmpp:jingle:apps:rtp:rtcp-fb:0",
+  jingle_apps_rtp           : "urn:xmpp:jingle:apps:rtp:1",
+  jingle_apps_rtp_hdrext    : "urn:xmpp:jingle:apps:rtp:rtp-hdrext:0",
+  jingle_transport_ice_udp  : "urn:xmpp:jingle:transports:ice-udp:1"
 };
 
 var TOP_LEVEL_ELEMENTS = {
   "message"             : "jabber:client",
   "presence"            : "jabber:client",
   "iq"                  : "jabber:client",
   "stream:features"     : "http://etherx.jabber.org/streams",
   "proceed"             : "urn:ietf:params:xml:ns:xmpp-tls",
diff --git a/chat/protocols/xmpp/xmpp.jsm b/chat/protocols/xmpp/xmpp.jsm
--- a/chat/protocols/xmpp/xmpp.jsm
+++ b/chat/protocols/xmpp/xmpp.jsm
@@ -27,16 +27,18 @@ XPCOMUtils.defineLazyModuleGetter(this, 
 XPCOMUtils.defineLazyModuleGetter(this, "NetUtil",
   "resource://gre/modules/NetUtil.jsm");
 XPCOMUtils.defineLazyServiceGetter(this, "imgTools",
                                    "@mozilla.org/image/tools;1",
                                    "imgITools");
 XPCOMUtils.defineLazyServiceGetter(this, "UuidGenerator",
                                    "@mozilla.org/uuid-generator;1",
                                    "nsIUUIDGenerator");
+XPCOMUtils.defineLazyModuleGetter(this, "Jingle",
+  "resource:///modules/xmpp-jingle.jsm");
 
 XPCOMUtils.defineLazyGetter(this, "_", function()
   l10nHelper("chrome://chat/locale/xmpp.properties")
 );
 
 /* This is an ordered list, used to determine chat buddy flags:
  *  index < member    -> noFlags
  *  index = member    -> voiced
@@ -180,16 +182,19 @@ XMPPMUCConversation.prototype = XMPPMUCC
 /* Helper class for buddy conversations */
 const XMPPConversationPrototype = {
   __proto__: GenericConvIMPrototype,
 
   _typingTimer: null,
   supportChatStateNotifications: true,
   _typingState: "active",
 
+  // The session ID of a audio/video call for this conversation.
+  _callSid: null,
+
   _init: function(aAccount, aBuddy) {
     this.buddy = aBuddy;
     GenericConvIMPrototype._init.call(this, aAccount, aBuddy.normalizedName);
   },
 
   get title() this.buddy.contactDisplayName,
   get normalizedName() this.buddy.normalizedName,
 
@@ -274,16 +279,53 @@ const XMPPConversationPrototype = {
       flags = {incoming: true, _alias: this.buddy.contactDisplayName};
     if (aDate) {
       flags.time = aDate / 1000;
       flags.delayed = true;
     }
     this.writeMessage(from, aMsg, flags);
   },
 
+  /* Called when the user requests a video call. */
+  initiateCall: function(aOffer) {
+    this._callSid = this._account.generateId();
+    this._sendCallStanza(aOffer, "session-initiate");
+  },
+
+  /* Called when the user accepts an incoming video call. */
+  acceptCall: function(aOffer) {
+    this._sendCallStanza(aOffer, "session-accept");
+  },
+
+  _sendCallStanza: function(aOffer, aType) {
+    let item = Stanza.node("jingle", null,
+                           {xmlns: Stanza.NS.jingle,
+                            action: aType,
+                            initiator: this._account._connection._jid.jid,
+                            sid: this._callSid},
+                            Jingle.sdp2xml(aOffer));
+
+    this._account.sendStanza(Stanza.iq("set", null, this.to, item));
+  },
+
+  /* Called when the user wants to disconnect call. */
+  endCall: function() {
+    let reason = Stanza.node("reason", null);
+    reason.addChild(Stanza.node("success", null));
+    reason.addChild(Stanza.node("text", null, null, "Call disconnected"));
+
+    let item = Stanza.node("jingle", null,
+                           {xmlns: Stanza.NS.jingle,
+                            action: "session-terminate",
+                            initiator: this._account._connection._jid.jid,
+                            sid: this._callSid}, reason);
+
+    this._account.sendStanza(Stanza.iq("set", null, this.to, item));
+  },
+
   /* Called when the user closed the conversation */
   close: function() {
     // TODO send the stanza indicating we have left the conversation?
     GenericConvIMPrototype.close.call(this);
   },
   unInit: function() {
     this._account.removeConversation(this.buddy.normalizedName);
     delete this.buddy;
@@ -816,16 +858,40 @@ const XMPPAccountPrototype = {
       for each (let qe in aStanza.getChildren("query")) {
         if (qe.uri != Stanza.NS.roster)
           continue;
 
         for each (let item in qe.getChildren("item"))
           this._onRosterItem(item, true);
         return;
       }
+
+      let jingle = aStanza.getElement(["jingle"]);
+      if (jingle) {
+        let action = jingle.attributes["action"];
+
+        if (action) {
+          let conversation =
+            this.createConversation(this.normalize(aStanza.attributes["from"]));
+          let contentNodes = jingle.getElements(["content"]);
+
+          if ((action == "session-initiate" ||
+               action == "session-accept") && contentNodes.length > 0) {
+            this._callSid = jingle.attributes["sid"];
+            let sdp = Jingle.xml2sdp(contentNodes);
+            let topic = action == "session-initiate" ?
+                        "webrtc-call-offer" : "webrtc-call-answer";
+            conversation.notifyObservers(this, topic, sdp);
+          }
+          else if (action == "session-terminate") {
+            if (jingle.attributes["sid"] == this._callSid)
+              conversation.notifyObservers(this, "call-disconnect");
+          }
+        }
+      }
     }
 
     if (aStanza.attributes["from"] == this._jid.domain) {
       let ping = aStanza.getElement(["ping"]);
       if (ping && ping.uri == Stanza.NS.ping) {
         let s = Stanza.iq("result", aStanza.attributes["id"], this._jid.domain);
         this._connection.sendStanza(s);
       }
